@using GumihoUI.Models
@using System.Globalization
@namespace GumihoUI
@typeparam TValue

<div class="dropdown-component @(Disabled ? "disabled" : string.Empty)"
     @onmouseout="MouseLeave"
     @onmouseover="MouseEnter"
     @onblur="LostFocus"
     @onkeydown="OpenMenu"
     @onkeydown:preventDefault="dropdownPreventDefault"
     tabindex="@(Disabled ? "-1" :"0")">

    <div class="dropdown" @onclick="ToggleMenu">
        <div class="dropdown-inner @(showItems ? "open" : string.Empty)">
            <span>
                @string.Join(", ", Items.Where(i => i.Selected).Select(i => i.Text))
            </span>
            <div class="dropdown-arrow"></div>
        </div>
    </div>

    @if (showItems)
    {
        <div class="dropdown-items">
            @if (ShowSearch)
            {
                <div class="dropdown-search">
                    <input class="dropdown-filter" placeholder="@Placeholder" type="text"
                           @onblur="LostFocus" @ref="filterInput"
                           @bind-value="filter" @bind-value:event="oninput" />
                </div>
            }
            @foreach (var option in FilterItems())
            {
                <div class="dropdown-item
                     @(option.Selected ? "dropdown-item-selected" : string.Empty)
                     @(option.Disabled ? "dropdown-item-disabled" : string.Empty)"
                     @onclick="() => UpdateValue(option)"
                     @onkeydown="e => UpdateValueByKeydown(e, option)"
                     @onkeydown:preventDefault="optionPreventDefault"
                     @onkeydown:stopPropagation="optionStopPropagation"
                     tabindex="@(!option.Disabled ? 0 : null)">
                    @option.Text
                </div>
            }
            @if (FilterItems().Count == 0)
            {
                <div class="dropdown-item dropdown-item-disabled">
                    <i>
                        @if (!string.IsNullOrEmpty(filter))
                        {
                            @NoResultsMessage
                        }
                        else
                        {
                            @NoItemsMessage
                        }
                    </i>
                </div>
            }

        </div>
    }
</div>

<span>filter @filter @FilterItems()?.Count prevent @optionPreventDefault stop @optionStopPropagation ddprevent @dropdownPreventDefault ddkey @ddkey opkey @opkey</span>

@code {
    private bool showItems;
    private bool shouldClose;
    private bool dropdownPreventDefault;
    private bool optionPreventDefault, optionStopPropagation;
    private string ddkey, opkey;
    private string filter = string.Empty;
    private ElementReference filterInput;

    [Parameter] public List<DropdownListItem<TValue>> Items { get; set; } = new();
    [Parameter] public TValue Value { get; set; } = default!;
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public List<TValue> Values { get; set; } = default!;
    [Parameter] public EventCallback<List<TValue>> ValuesChanged { get; set; }
    [Parameter] public bool MultiSelect { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public string Placeholder { get; set; } = "Search...";
    [Parameter] public string NoResultsMessage { get; set; } = "No results";
    [Parameter] public string NoItemsMessage { get; set; } = "No items";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (Items.Count == 0)
                return;

            if (!MultiSelect)
            {
                this.Value = Items.Where(i => i.Selected).First().Value;
                ChangeSingle(this.Value);
            }
            else
            {
                foreach (var item in Items.Where(i => i.Selected))
                {
                    ChangeMulti(item.Value);
                }
            }
        }
    }

    async void ToggleMenu()
    {
        if (!Disabled)
        {
            showItems = !showItems;

            if (!showItems)
            {
                filter = string.Empty;
            }
            else
            {
                //await filterInput.FocusAsync();
            }
        }
    }


    void OnChange(ChangeEventArgs e)
    {
        var value = (TValue)Convert.ChangeType(e.Value, typeof(TValue));

        if (value is null)
        {
            return;
        }

        if (!MultiSelect)
        {
            ChangeSingle(value);
        }
        else
        {
            ChangeMulti(value);
        }
    }

    List<DropdownListItem<TValue>> FilterItems()
    {
        var compareInfo = CultureInfo.InvariantCulture.CompareInfo;

        return Items
            .Where(i => compareInfo.IndexOf(i.Text, filter,
                CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) > -1)
            .ToList();
    }

    void UpdateValueByKeydown(KeyboardEventArgs e, DropdownListItem<TValue> option)
    {
        if (e.Code is "Space" or "Enter")
        {
            UpdateValue(option);
            optionPreventDefault = true;
            optionStopPropagation = true;
            opkey = "option";
            return;
        }
        opkey = "";
        optionStopPropagation = false;
        optionPreventDefault = false;
    }

    void UpdateValue(DropdownListItem<TValue> option)
    {
        if (option.Disabled)
            return;

        if (!MultiSelect)
        {
            foreach (var item in Items.Where(i => i.Selected))
            {
                item.Selected = false;
            }

            ChangeSingle(option.Value);
            ToggleMenu();
        }
        else
        {
            ChangeMulti(option.Value);
        }

        option.Selected = !option.Selected;
    }

    void ChangeSingle(TValue value)
    {
        ValueChanged.InvokeAsync(value);
    }

    void ChangeMulti(TValue value)
    {
        if (Values is null)
            Values = new();

        if (!Values.Contains(value))
        {
            Values.Add(value);
        }
        else
        {
            Values.Remove(value);
        }
        ValuesChanged.InvokeAsync(Values);
    }

    private void OpenMenu(KeyboardEventArgs e)
    {
        if (e.Code is "Space" or "Enter" && !showItems)
        {
            ToggleMenu();
            dropdownPreventDefault = true;
            ddkey = "dd";
            return;
        }
        ddkey = "";
        dropdownPreventDefault = false;
    }

    private void MouseLeave()
    {
        shouldClose = true;
    }

    private void MouseEnter()
    {
        shouldClose = false;
    }

    private void LostFocus(FocusEventArgs focusEventArgs)
    {
        if (shouldClose)
            ToggleMenu();
    }
}
