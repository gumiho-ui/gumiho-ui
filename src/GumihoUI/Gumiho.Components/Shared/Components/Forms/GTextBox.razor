@inherits InputBase<string>

<div class="form-component">
    <div class="form-component-group">
        <input type="text" @bind="@CurrentValue" class="form-input__textBox"
               @bind:event="oninput" @onchange="@OnChange"
               maxlength="@MaxLength" />
        <div class="form-input__group">
            <div class="form-input__validation">
                @if (Validatable)
                {
                    @foreach (var message in ValidationMessages)
                    {
                        <span>@message</span>
                    }
                }
            </div>
            <div class="form-input__counter">
                @if (Counter)
                {
                    <span>@(CurrentValue?.Length ?? 0)@(MaxLength.HasValue ? $"/{MaxLength}" : string.Empty)</span>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool Validatable { get; set; } = true;
    [Parameter] public bool Counter { get; set; }
    [Parameter] public int? MaxLength { get; set; }

    private IList<string> ValidationMessages = new List<string>();

    void OnChange(ChangeEventArgs e)
    {
        EditContext.NotifyFieldChanged(FieldIdentifier);
        ValidationMessages = EditContext.GetValidationMessages(FieldIdentifier).ToArray();
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = null;
        return true;
    }
}
